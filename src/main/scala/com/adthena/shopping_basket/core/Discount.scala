package com.adthena.shopping_basket.core

import com.adthena.shopping_basket.core.offer.Offer

/**
 * Represents a discount applied for a given basket with a given offers
 *
 * @param totalPriceDiscount  sum of all the discounts from applicable offers represented as a price object
 * @param applicableOffers    map of applicable offers for a given basket with a total discount generated by each offer
 */
case class Discount private(totalPriceDiscount: Price, applicableOffers: Map[Offer, Price])

object Discount {

  /**
   * @param basket shopping basket
   * @param offers available offers
   * @return total discount from all the offers and the offers applied to a given basket
   */
  def evaluate(basket: Basket, offers: List[Offer]): Discount = {

    val applicableOffers = offers.
      map(offer => (offer, offer.getTotalDiscount(basket))).
      filter(_._2.value > 0).
      toMap

    val totalDiscount = applicableOffers.
      map(_._2.value).
      sum

    Discount(Price(totalDiscount), applicableOffers)

  }


}
